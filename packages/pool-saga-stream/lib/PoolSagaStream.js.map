{"version":3,"sources":["../src/PoolSagaStream.js"],"names":["PoolSagaStream","buildRootSaga","sagaMiddleware","Object","defineProperty","value","writable","enumerable","refDucks","refErrorReporter","rootSaga","defaultRootSaga","sagas","current","reduce","duck","errorReporter","push","poolName","duckName","run"],"mappings":"+QAGe,QAASA,CAAAA,cAAT,EAAgD,8DAAJ,EAAI,CAAtBC,CAAsB,GAAtBA,aAAsB,CACvDC,CAAc,CAAG,wBADsC,CA6CvDF,CAAc,CAAG,EA7CsC,CAmD7D,MAJAG,CAAAA,MAAM,CAACC,cAAP,CAAsBJ,CAAtB,CAAsC,aAAtC,CAAqD,CAAEK,KAAK,CA5C5D,UAAuB,CACrB,MAAO,CAACH,CAAD,CACR,CA0CoD,CAAsBI,QAAQ,GAA9B,CAAuCC,UAAU,GAAjD,CAArD,CAIA,CAHAJ,MAAM,CAACC,cAAP,CAAsBJ,CAAtB,CAAsC,aAAtC,CAAqD,CAAEK,KAAK,CAzC5D,UAAuB,CAEtB,CAuCoD,CAAsBC,QAAQ,GAA9B,CAAuCC,UAAU,GAAjD,CAArD,CAGA,CAFAJ,MAAM,CAACC,cAAP,CAAsBJ,CAAtB,CAAsC,YAAtC,CAAoD,CAAEK,KAAK,CAtC3D,UAAyD,8DAAJ,EAAI,CAAnCG,CAAmC,GAAnCA,QAAmC,CAAzBC,CAAyB,GAAzBA,gBAAyB,CACjDC,CAAQ,CAAGT,CAAa,CAC1BA,CAAa,CAAC,CAAEO,QAAQ,CAARA,CAAF,CAAYC,gBAAgB,CAAhBA,CAAZ,CAAD,CADa,yBAE1B,QAAUE,CAAAA,CAAV,wFAyBE,MAxBMC,CAAAA,CAwBN,CAxBcJ,CAAQ,CAACK,OAAT,CAAiBC,MAAjB,CAAwB,SAACF,CAAD,CAAQG,CAAR,CAAiB,CAsBrD,MArBIA,CAAAA,CAAI,CAACL,QAqBT,GApBEK,CAAI,CAACC,aAAL,CAAmBP,CAAgB,CAACI,OAApC,CAoBF,CAnBED,CAAK,CAACK,IAAN,CACE,2CAAM,4FAGA,yBAAM,kBAAKF,CAAI,CAACL,QAAV,CAAN,CAHA,sEAMAD,CAAgB,CAACI,OAAjB,MAEE,4BAFF,CAGE,MAHF,CAIEE,CAAI,CAACG,QAJP,CAKEH,CAAI,CAACI,QALP,CANA,6EAAN,EADF,CAmBF,EAAOP,CACR,CAvBa,CAuBX,EAvBW,CAwBd,UAAM,iBAAIA,CAAJ,CAAN,CAzBF,oCAAUD,CAAV,EAF0B,CADyB,CA+BvDT,CAAc,CAACkB,GAAf,CAAmBV,CAAnB,CACD,CAMmD,CAAqBJ,QAAQ,GAA7B,CAAsCC,UAAU,GAAhD,CAApD,CAEA,CAAOP,CACR","sourcesContent":["import createSagaMiddleware from 'redux-saga'\nimport { spawn, call, all } from 'redux-saga/effects'\n\nexport default function PoolSagaStream({ buildRootSaga } = {}) {\n  const sagaMiddleware = createSagaMiddleware()\n\n  function middlewares() {\n    return [sagaMiddleware]\n  }\n\n  function beforeBuild() {\n    // NOP\n  }\n\n  function afterBuild({ refDucks, refErrorReporter } = {}) {\n    const rootSaga = buildRootSaga\n      ? buildRootSaga({ refDucks, refErrorReporter })\n      : function* defaultRootSaga() {\n          const sagas = refDucks.current.reduce((sagas, duck) => {\n            if (duck.rootSaga) {\n              duck.errorReporter(refErrorReporter.current)\n              sagas.push(\n                spawn(function* () {\n                  while (true) {\n                    try {\n                      yield call(duck.rootSaga)\n                      break\n                    } catch (error) {\n                      refErrorReporter.current(\n                        error,\n                        '@duckness/pool-saga-stream',\n                        'saga',\n                        duck.poolName,\n                        duck.duckName\n                      )\n                    }\n                  }\n                })\n              )\n            }\n            return sagas\n          }, [])\n          yield all(sagas)\n        }\n\n    sagaMiddleware.run(rootSaga)\n  }\n\n  const PoolSagaStream = {}\n\n  Object.defineProperty(PoolSagaStream, 'middlewares', { value: middlewares, writable: false, enumerable: true })\n  Object.defineProperty(PoolSagaStream, 'beforeBuild', { value: beforeBuild, writable: false, enumerable: true })\n  Object.defineProperty(PoolSagaStream, 'afterBuild', { value: afterBuild, writable: false, enumerable: true })\n\n  return PoolSagaStream\n}\n"],"file":"PoolSagaStream.js"}