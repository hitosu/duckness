{"version":3,"file":"EpicDuck.js","sourceRoot":"","sources":["../src/EpicDuck.ts"],"names":[],"mappings":";;AAAA,uCAAqE;AAGrE,qDAAyF;AACzF,4CAA2D;AA4B3D,SAAwB,QAAQ,CAAC,QAAgB,EAAE,QAAgB,EAAE,WAAyB;IAC5F,IAAM,IAAI,GAAc,IAAA,cAAI,EAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAc,CAAA;IAE1E,IAAM,gBAAgB,GAAG;QACvB,OAAO,EAAE,CAAC,WAAW,KAAK,OAAO,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAC;KAC7E,CAAA;IAED,IAAM,gBAAgB,GAAkC,UAAU,QAAwB;QACxF,gBAAgB,CAAC,OAAO,GAAG,QAAQ,CAAA;IACrC,CAAC,CAAA;IAED,IAAM,WAAW,GAA6B;QAAU,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACpE,IAAI,UAAU,KAAK,OAAO,gBAAgB,CAAC,OAAO,EAAE;YAClD,gBAAgB,CAAC,OAAO,OAAxB,gBAAgB,EAAY,IAAI,EAAC;SAClC;IACH,CAAC,CAAA;IAED,IAAM,KAAK,GAAW,EAAE,CAAA;IACxB,IAAM,OAAO,GAAsB,UAAU,IAAI;QAE/C,KAAK,CAAC,IAAI,CAAC,UAAC,OAAO,EAAE,MAAM,EAAE,YAAY;YACvC,OAAA,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAC7G,IAAA,sBAAY,EAAC,UAAC,KAAK,EAAE,MAAM;gBACzB,IAAI;oBACF,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;oBAC9B,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;iBAC/B;gBAAC,WAAM;iBAEP;gBACD,WAAW,CAAC,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAClE,OAAO,MAAM,CAAA;YACf,CAAC,CAAC,CACH;QAXD,CAWC,CACF,CAAA;IACH,CAAC,CAAA;IAED,IAAM,QAAQ,GAA0B;QACtC,OAAO,+BAAY,eAAI,KAAK,EAAC;IAC/B,CAAC,CAAA;IAED,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC1F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/G,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAErG,OAAO,IAAI,CAAA;AACb,CAAC;AA9CD,2BA8CC","sourcesContent":["import Duck, { IDuck, IDuckFace, TDuckContext } from '@duckness/duck'\nimport { Action } from 'redux'\nimport { Observable } from 'rxjs'\nimport { combineEpics, Epic, ActionsObservable, StateObservable } from 'redux-observable'\nimport { catchError as rxCatchError } from 'rxjs/operators'\n\nexport interface IEpicDuck extends IDuck {\n  // add epic\n  readonly epic: (epic: IDuckedEpic) => void\n  // root epic for this duck\n  readonly rootEpic: () => Epic\n  // set error reporter for isolated epics\n  readonly setErrorReporter: (reporter: IErrorReporter) => void\n  // report error to configured error reporter\n  readonly reportError: (...args: any[]) => void\n}\n\nexport interface IDuckedEpic<Input extends Action = any, Output extends Input = Input, State = any, Dependencies = any>\n  extends Epic {\n  (\n    action$: ActionsObservable<Input>,\n    state$: StateObservable<State>,\n    dependencies: Dependencies,\n    duckFace?: IDuckFace\n  ): Observable<Output>\n  (action$: ActionsObservable<Input>, state$: StateObservable<State>, duckFace?: IDuckFace): Observable<Output>\n}\n\nexport interface IErrorReporter {\n  (...args: any[]): void\n}\n\nexport default function EpicDuck(duckName: string, poolName: string, duckContext: TDuckContext) {\n  const duck: IEpicDuck = Duck(duckName, poolName, duckContext) as IEpicDuck\n\n  const refErrorReporter = {\n    current: ('undefined' !== typeof console && console.error) || (() => void 0) // eslint-disable-line no-console\n  }\n\n  const setErrorReporter: IEpicDuck['setErrorReporter'] = function (reporter: IErrorReporter) {\n    refErrorReporter.current = reporter\n  }\n\n  const reportError: IEpicDuck['reportError'] = function (...args: any[]) {\n    if ('function' === typeof refErrorReporter.current) {\n      refErrorReporter.current(...args)\n    }\n  }\n\n  const epics: Epic[] = []\n  const addEpic: IEpicDuck['epic'] = function (epic) {\n    // add isolated epic\n    epics.push((action$, state$, dependencies) =>\n      (dependencies ? epic(action$, state$, dependencies, duck.duckFace) : epic(action$, state$, duck.duckFace)).pipe(\n        rxCatchError((error, source) => {\n          try {\n            error.poolName = duck.poolName\n            error.duckName = duck.duckName\n          } catch {\n            // skip\n          }\n          reportError(error, '@duckness/epic', duck.poolName, duck.duckName)\n          return source\n        })\n      )\n    )\n  }\n\n  const rootEpic: IEpicDuck['rootEpic'] = function () {\n    return combineEpics(...epics)\n  }\n\n  Object.defineProperty(duck, 'epic', { value: addEpic, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'rootEpic', { value: rootEpic, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'setErrorReporter', { value: setErrorReporter, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'reportError', { value: reportError, writable: false, enumerable: true })\n\n  return duck\n}\n"]}