{"version":3,"file":"Duck.js","sourceRoot":"","sources":["../src/Duck.ts"],"names":[],"mappings":"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","sourcesContent":["export type TState = any\n\nexport type TActionType = string\nexport type TFullActionType = string\nexport type TActionPayload = any\nexport interface IAction {\n  type: TActionType\n  payload: TActionPayload\n  error: boolean\n}\n\n// optional builder for action payload\nexport interface IPayloadBuilder {\n  (payload: TActionPayload, duckFace: IDuckFace): TActionPayload\n}\n// optional transform every built action\nexport interface IActionTransformer {\n  (action: IAction, duckFace: IDuckFace): IAction\n}\n// map short duck action types to full action types\ntype TActionTypesMap = { [actionType: TActionType]: TFullActionType }\n\n// select some value from sources (usually one source - state)\nexport interface ISelector {\n  (...sources: any[]): any\n}\n// selector with added duckFace\nexport interface IDuckedSelector {\n  (...args: [...any[], IDuckFace]): any\n  readonly originalSelector: ISelector\n  readonly selectorName: string\n}\n// build duck selector and register it under some name\ninterface IBuildSelector {\n  (selectorName: string | null, selector: ISelector): IDuckedSelector\n}\n// map selector names to selector\ninterface ISelectors {\n  [selectorName: string]: IDuckedSelector\n}\n\n// action constructor build action from payload\nexport interface IActionConstructor {\n  (payload: TActionPayload): IAction\n  readonly actionType: TFullActionType\n  readonly duckActionType: TActionType\n  readonly payloadBuilder: IPayloadBuilder\n  readonly actionTransformer: IActionTransformer\n  readonly actionName?: string\n}\n// build and register action constructor\ninterface IBuildActionConstructor {\n  (\n    actionNameOrType: string | TActionType | null,\n    forActionType?: TActionType | null,\n    payloadBuilder?: IPayloadBuilder,\n    actionTransformer?: IActionTransformer\n  ): IActionConstructor\n  [actionName: string]: IActionConstructor\n}\n\ntype TTypedReducers = { [actionType: TActionType]: { actionType: TActionType; reducers: IReducer[] } }\ntype TMatchActionType = TActionType | ((action: IAction, duckFace: IDuckFace) => boolean) | null\ntype TCustomReducers = [TMatchActionType, IReducer][]\ninterface IAddReducer {\n  (actionType: TMatchActionType, reducer: IReducer): void\n}\n\ninterface ICloneDuck {\n  (duckName: string, poolName: string, duckContext: TDuckContext): IDuck\n}\n\nexport type TDuckContext = any\n\nexport interface IReducer {\n  (state: TState, action: IAction, duckFace?: IDuckFace): TState\n}\n\nexport interface IDuck extends IReducer {\n  readonly duckFace: IDuckFace\n  readonly duckName: string\n  readonly poolName: string\n  readonly duckContext: any\n  readonly actionTypes: TActionTypesMap\n  readonly mapActionType: (actionType: TActionType) => TFullActionType\n  readonly listActionTypes: () => TActionType[]\n  readonly action: IBuildActionConstructor\n  readonly selector: IBuildSelector\n  readonly select: ISelectors\n  readonly reducer: IAddReducer\n  readonly clone: ICloneDuck\n  readonly updateContext: (newDuckContext: TDuckContext) => void\n}\n\n// duck interface added to all reducer, selector and some other calls\nexport interface IDuckFace {\n  readonly reduce: IDuck\n  readonly duckName: string\n  readonly poolName: string\n  readonly duckContext: TDuckContext\n  readonly actionTypes: TActionTypesMap\n  readonly mapActionType: (actionType: TActionType) => TFullActionType\n  readonly listActionTypes: () => TActionType[]\n  readonly action: IBuildActionConstructor\n  readonly select: ISelectors\n}\n\nexport default function Duck(duckName: string, poolName: string, duckContext: TDuckContext) {\n  // updatable duck context\n  const refDuckContext = {\n    current: duckContext\n  }\n\n  // DUCK FACE is interface to duck received by selectors and reducers\n  const duckFace: IDuckFace = {} as IDuckFace\n\n  // Duck is root reducer\n  const typedReducers: TTypedReducers = {}\n  const customReducers: TCustomReducers = []\n  const duck: IDuck = function duckRootReducer(state, action) {\n    const actionReducers = typedReducers[action.type]\n    const reducedState =\n      null == actionReducers || 0 === actionReducers.reducers.length\n        ? state\n        : 1 === actionReducers.reducers.length\n        ? actionReducers.reducers[0](state, action, duckFace)\n        : actionReducers.reducers.reduce((state, reducer) => {\n            const reducedState = reducer(state, action, duckFace)\n            return null == reducedState ? state : reducedState\n          }, state)\n\n    return customReducers.length\n      ? customReducers.reduce((state, customReducer) => {\n          if (\n            (null == customReducer[0] && 0 === action.type.indexOf(`${poolName || ''}/${duckName || ''}/`)) ||\n            ('function' === typeof customReducer[0] && customReducer[0](action, duckFace))\n          ) {\n            const reducedState = customReducer[1](state, action, duckFace)\n            return null == reducedState ? state : reducedState\n          } else {\n            return state\n          }\n        }, reducedState)\n      : reducedState\n  } as IDuck\n\n  // Duck attributes\n  Object.defineProperty(duck, 'duckFace', { value: duckFace, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'duckName', { value: duckName, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'poolName', { value: poolName, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'duckContext', {\n    value: refDuckContext.current,\n    writable: false,\n    configurable: true,\n    enumerable: true\n  })\n\n  // duckFace attributes\n  Object.defineProperty(duckFace, 'reduce', { value: duck, writable: false, enumerable: true })\n  Object.defineProperty(duckFace, 'duckName', { value: duckName, writable: false, enumerable: true })\n  Object.defineProperty(duckFace, 'poolName', { value: poolName, writable: false, enumerable: true })\n  Object.defineProperty(duckFace, 'duckContext', {\n    value: refDuckContext.current,\n    writable: false,\n    configurable: true,\n    enumerable: true\n  })\n\n  // add functionality\n  addActionTypes(duck, duckFace, duckName, poolName)\n  addActionConstructors(duck, duckFace)\n  addSelectors(duck, duckFace)\n  addReducers(duck, typedReducers, customReducers)\n  addCloning(duck, typedReducers, customReducers)\n  addContextUpdate(duck, duckFace, refDuckContext)\n\n  return duck\n}\n\n// ---- ACTION TYPES -------------------------------------------------------------------------\n\nfunction addActionTypes(duck: IDuck, duckFace: IDuckFace, duckName: string, poolName: string) {\n  const actionTypes: TActionTypesMap = {}\n  function mapActionType(actionType: TActionType): TFullActionType {\n    const fullActionType: TFullActionType = `${poolName || ''}/${duckName || ''}/${actionType}`\n    return '@@' === actionType.substring(0, 2) // do not store hidden types in dictionary\n      ? fullActionType\n      : actionTypes[actionType] ||\n          Object.defineProperty(actionTypes, actionType, {\n            value: fullActionType,\n            writable: false,\n            enumerable: true\n          })[actionType]\n  }\n  function listActionTypes() {\n    return Object.keys(actionTypes)\n  }\n\n  Object.defineProperty(duck, 'actionTypes', { value: actionTypes, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'mapActionType', { value: mapActionType, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'listActionTypes', { value: listActionTypes, writable: false, enumerable: true })\n\n  Object.defineProperty(duckFace, 'actionTypes', { value: actionTypes, writable: false, enumerable: true })\n  Object.defineProperty(duckFace, 'mapActionType', { value: mapActionType, writable: false, enumerable: true })\n  Object.defineProperty(duckFace, 'listActionTypes', { value: listActionTypes, writable: false, enumerable: true })\n}\n\n// ---- ACTION CONSTRUCTORS -------------------------------------------------------------------------\n\nfunction addActionConstructors(duck: IDuck, duckFace: IDuckFace) {\n  const buildActionConstructor: IBuildActionConstructor = function (\n    actionNameOrType,\n    forActionType,\n    payloadBuilder,\n    actionTransformer\n  ) {\n    const actionType = forActionType || actionNameOrType\n    if ('string' !== typeof actionType || !actionType) {\n      throw new Error('@duckness/duck.action: - actionType must be a non empty String')\n    }\n    const fullActionType = duck.mapActionType(actionType)\n    const actionConstructor: IActionConstructor = function (payload: TActionPayload) {\n      const isError = payload instanceof Error\n      const action = {\n        type: fullActionType,\n        payload: !isError && payloadBuilder ? payloadBuilder(payload, duckFace) : payload,\n        error: isError\n      }\n      return actionTransformer ? actionTransformer(action, duckFace) : action\n    } as IActionConstructor\n    Object.defineProperty(actionConstructor, 'actionType', { value: fullActionType, writable: false, enumerable: true })\n    Object.defineProperty(actionConstructor, 'duckActionType', { value: actionType, writable: false, enumerable: true })\n    Object.defineProperty(actionConstructor, 'payloadBuilder', {\n      value: payloadBuilder,\n      writable: false,\n      enumerable: true\n    })\n    Object.defineProperty(actionConstructor, 'actionTransformer', {\n      value: actionTransformer,\n      writable: false,\n      enumerable: true\n    })\n\n    if (actionNameOrType && 'string' === typeof actionNameOrType) {\n      Object.defineProperty(actionConstructor, 'actionName', {\n        value: actionNameOrType,\n        writable: false,\n        enumerable: true\n      })\n      Object.defineProperty(buildActionConstructor, actionNameOrType, {\n        value: actionConstructor,\n        writable: false,\n        enumerable: true\n      })\n    }\n    return actionConstructor\n  } as IBuildActionConstructor\n\n  Object.defineProperty(duck, 'action', { value: buildActionConstructor, writable: false, enumerable: true })\n\n  Object.defineProperty(duckFace, 'action', { value: buildActionConstructor, writable: false, enumerable: true })\n}\n\n// ---- SELECTORS -------------------------------------------------------------------------\n\nfunction addSelectors(duck: IDuck, duckFace: IDuckFace) {\n  const selectors: ISelectors = {}\n  const buildSelector: IBuildSelector = function (selectorName, selector) {\n    if ('function' === typeof selector) {\n      const duckedSelector: IDuckedSelector = function (...args) {\n        return selector.apply(this, [...args, duckFace])\n      } as IDuckedSelector\n      Object.defineProperty(duckedSelector, 'originalSelector', {\n        value: selector,\n        writable: false,\n        enumerable: true\n      })\n      if (selectorName) {\n        Object.defineProperty(duckedSelector, 'selectorName', {\n          value: selectorName,\n          writable: false,\n          enumerable: true\n        })\n        Object.defineProperty(selectors, selectorName, {\n          value: duckedSelector,\n          writable: false,\n          enumerable: true\n        })\n      }\n      return duckedSelector\n    } else {\n      throw new Error('@duckness/duck.selector: - selector must be a Function')\n    }\n  }\n  Object.defineProperty(duck, 'selector', { value: buildSelector, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'select', { value: selectors, writable: false, enumerable: true })\n\n  Object.defineProperty(duckFace, 'select', { value: selectors, writable: false, enumerable: true })\n}\n\n// ---- REDUCERS -------------------------------------------------------------------------\n\nfunction addReducers(duck: IDuck, typedReducers: TTypedReducers, customReducers: TCustomReducers) {\n  const addReducer: IAddReducer = function (actionType, reducer) {\n    if ('function' === typeof reducer) {\n      if ('string' === typeof actionType) {\n        const fullActionType = duck.mapActionType(actionType)\n        if (!typedReducers[fullActionType]) {\n          typedReducers[fullActionType] = {\n            actionType,\n            reducers: []\n          }\n        }\n        typedReducers[fullActionType].reducers.push(reducer)\n      } else if ('function' === typeof actionType) {\n        customReducers.push([actionType, reducer])\n      } else if (null == actionType) {\n        customReducers.push([null, reducer])\n      } else {\n        throw new Error('@duckness/duck.reducer: actionType must be a String, null or Function')\n      }\n      return reducer\n    } else {\n      throw new Error('@duckness/duck.reducer: reducer must be a Function')\n    }\n  }\n  Object.defineProperty(duck, 'reducer', { value: addReducer, writable: false, enumerable: true })\n}\n\n// ---- CLONING --------------------------------------------------------------------------\n\nfunction addCloning(duck: IDuck, typedReducers: TTypedReducers, customReducers: TCustomReducers) {\n  const cloneDuck: ICloneDuck = function (duckName, poolName, duckContext) {\n    const clonedDuck: IDuck = Duck(duckName, poolName, duckContext)\n    // clone action types\n    duck.listActionTypes().forEach(function (actionType) {\n      clonedDuck.mapActionType(actionType)\n    })\n\n    // clone action constructors\n    Object.keys(duck.action).forEach(actionName => {\n      const actionConstructor = duck.action[actionName]\n      if ('function' === typeof actionConstructor && actionConstructor.actionType) {\n        clonedDuck.action(actionName, actionConstructor.duckActionType)\n      }\n    })\n\n    // clone selectors\n    Object.keys(duck.select).forEach(selectorName => {\n      if (duck.select[selectorName].originalSelector) {\n        clonedDuck.selector(selectorName, duck.select[selectorName].originalSelector)\n      }\n    })\n\n    // clone reducers\n    Object.keys(typedReducers).forEach(reducerActionType => {\n      const actionReducers = typedReducers[reducerActionType]\n      if (actionReducers) {\n        const { actionType, reducers } = actionReducers\n        reducers.forEach(reducer => {\n          clonedDuck.reducer(actionType, reducer)\n        })\n      }\n    })\n    customReducers.forEach(customReducer => {\n      clonedDuck.reducer(customReducer[0], customReducer[1])\n    })\n\n    return clonedDuck\n  }\n  Object.defineProperty(duck, 'clone', { value: cloneDuck, writable: false, enumerable: true })\n}\n\n// ---- CONTEXT UPDATE -------------------------------------------------------------------\n\nfunction addContextUpdate(duck: IDuck, duckFace: IDuckFace, refDuckContext: { current: TDuckContext }) {\n  function updateContext(newDuckContext: TDuckContext) {\n    refDuckContext.current = newDuckContext\n    Object.defineProperty(duck, 'duckContext', {\n      value: refDuckContext.current,\n      writable: false,\n      configurable: true,\n      enumerable: true\n    })\n    Object.defineProperty(duckFace, 'duckContext', {\n      value: refDuckContext.current,\n      writable: false,\n      configurable: true,\n      enumerable: true\n    })\n  }\n  Object.defineProperty(duck, 'updateContext', { value: updateContext, writable: false, enumerable: true })\n}\n"]}