{"version":3,"file":"Pool.js","sourceRoot":"","sources":["../src/Pool.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware, Store, Middleware, Unsubscribe } from 'redux'\nimport { IDuck, IReducer, IAction, ISelector, TState } from '@duckness/duck'\nexport { IDuck, IReducer, IAction, ISelector, TState }\n\nexport interface IPool {\n  readonly addDuck: (duck: IDuck) => void\n  readonly addMiddleware: (middleware: Middleware) => void\n  readonly addStream: (stream: IPoolStream) => void\n  readonly preReducer: (reducer: IReducer) => void\n  readonly postReducer: (reducer: IReducer) => void\n  readonly build: (props: TPoolProps) => Store\n  readonly reportError: IErrorReporter\n  readonly setErrorReporter: (reporter: IErrorReporter) => void\n  readonly store: Store\n  readonly dispatch: IPoolDispatch\n  readonly select: ISelector\n  readonly fetch: (\n    selector?: ISelector,\n    resolver?: (selectedValue: any, resolveValue: (value: any) => void, prevSelectedValue: any) => void\n  ) => Promise<any>\n  readonly trigger: (\n    selector?: ISelector,\n    callback?: (selectedValue: any) => void,\n    resolver?: (selectedValue: any, callback: (selectedValue: any) => void, prevSelectedValue: any) => void\n  ) => Unsubscribe\n  readonly reduce: IPoolReduce\n  readonly ducks: IDuck[]\n  readonly getDuckByName: (duckPath: TDuckPath) => IDuck\n  readonly middlewares: Middleware[]\n  readonly streams: IPoolStream[]\n  readonly props: TPoolProps\n}\nexport interface IPoolArgs {\n  poolName?: string\n  props?: TPoolProps\n  ducks?: IDuck[]\n  middlewares?: Middleware[]\n  streams?: IPoolStream[]\n  buildStore?: (\n    props: TPoolProps,\n    {\n      refProps,\n      refDucks,\n      refReducers,\n      refErrorReporter\n    }: { refProps: TRefProps; refDucks: TRefDucks; refReducers: TRefReducers; refErrorReporter: TRefErrorReporter }\n  ) => any\n  buildRootReducer?: (\n    ducks: IDuck[],\n    {\n      refProps,\n      refReducers,\n      refDucks,\n      refErrorReporter\n    }: { refProps: TRefProps; refReducers: TRefReducers; refDucks: TRefDucks; refErrorReporter: TRefErrorReporter }\n  ) => IReducer\n  connectReduxDevtoolsExtension?: boolean\n}\nexport type TPoolProps = { [key: string]: any }\n\nexport type TDuckPath = string | [duckPoolName: string, duckName: string]\n\nexport interface IPoolDispatch {\n  (action: IAction): ReturnType<Store['dispatch']>\n  (duckPath: TDuckPath, actionName: string, payload: any): ReturnType<Store['dispatch']>\n}\nexport interface IPoolError extends Error {\n  poolName?: string\n  actionName?: string\n  duckPath?: TDuckPath\n  dispatchedAction?: IAction\n}\n\nexport interface IPoolReduce {\n  (action: IAction): TState\n  (state: TState, action: IAction): TState\n}\n\nexport interface IPoolStream {\n  readonly beforeBuild?: ({\n    refDucks,\n    refProps,\n    refReducers,\n    refErrorReporter\n  }: {\n    refDucks: TRefDucks\n    refProps: TRefProps\n    refReducers: TRefReducers\n    refErrorReporter: TRefErrorReporter\n  }) => void\n  readonly middlewares?: ({\n    refDucks,\n    refProps,\n    refReducers,\n    refErrorReporter\n  }: {\n    refDucks: TRefDucks\n    refProps: TRefProps\n    refReducers: TRefReducers\n    refErrorReporter: TRefErrorReporter\n  }) => Middleware[]\n  readonly afterBuild?: ({\n    refStore,\n    refDucks,\n    refProps,\n    refReducers,\n    refErrorReporter\n  }: {\n    refStore: TRefStore\n    refDucks: TRefDucks\n    refProps: TRefProps\n    refReducers: TRefReducers\n    refErrorReporter: TRefErrorReporter\n  }) => void\n}\n\nexport interface IErrorReporter {\n  (...args: any[]): void\n}\n\nexport type TRefProps = { current: TPoolProps }\nexport type TRefDucks = { current: IDuck[]; map: { [poolName: string]: { [duckName: string]: IDuck } } }\nexport type TRefStore = { current: Store }\nexport type TRefReducers = { root: IReducer; pre: IReducer; post: IReducer }\nexport type TRefStreams = { current: IPoolStream[] }\nexport type TRefMiddlewares = { current: Middleware[] }\nexport type TRefErrorReporter = { current: IErrorReporter }\n\n// this pool stream will send @@INIT action to every registered duck after build\nconst initDucksStream: IPoolStream = Object.freeze({\n  afterBuild({ refStore, refDucks, refProps }) {\n    refDucks.current.forEach(duck => {\n      refStore.current.dispatch({ type: duck.mapActionType('@@INIT'), payload: refProps.current })\n    })\n  }\n} as IPoolStream)\n\nfunction mapDuck(map: { [poolName: string]: { [duckName: string]: IDuck } } = {}, duck: IDuck) {\n  const { poolName, duckName } = duck\n  if (null != poolName && null != duckName) {\n    if (null == map[poolName]) {\n      map[poolName] = {}\n    }\n    map[poolName][duckName] = duck\n  }\n  return map\n}\n\n// POOL\nexport default function Pool({\n  poolName = 'pool',\n  props: initProps = {},\n  ducks: initDucks = [],\n  middlewares: initMiddlewares = [],\n  streams: initStreams = [],\n  buildStore = () => {\n    return {}\n  },\n  buildRootReducer,\n  connectReduxDevtoolsExtension = true\n}: IPoolArgs = {}) {\n  const refProps: TRefProps = { current: initProps || {} }\n  const refDucks: TRefDucks = {\n    current: initDucks || [],\n    map: (initDucks || []).reduce((map, duck) => mapDuck(map, duck), {})\n  }\n  const refStreams: TRefStreams = { current: (initStreams || []).concat([initDucksStream]) }\n  const refMiddlewares: TRefMiddlewares = { current: initMiddlewares || [] }\n  const refErrorReporter: TRefErrorReporter = {\n    // eslint-disable-next-line no-console\n    current: ('undefined' !== typeof console && console.error) || (() => void 0)\n  }\n\n  const addDuck: IPool['addDuck'] = function (duck) {\n    refDucks.current.push(duck)\n    refDucks.map = mapDuck(refDucks.map, duck)\n  }\n\n  const addMiddleware: IPool['addMiddleware'] = function (middleware) {\n    refMiddlewares.current.push(middleware)\n  }\n\n  const addStream: IPool['addStream'] = function (stream) {\n    refStreams.current.unshift(stream)\n  }\n\n  const setErrorReporter: IPool['setErrorReporter'] = function (reporter) {\n    refErrorReporter.current = reporter\n  }\n\n  const reportError: IErrorReporter = function (...args) {\n    if ('function' === typeof refErrorReporter.current) {\n      refErrorReporter.current(...args)\n    }\n  }\n\n  const refStore: TRefStore = { current: null }\n\n  const getDuckByName: IPool['getDuckByName'] = function (duckPath) {\n    if ('string' === typeof duckPath || Array.isArray(duckPath)) {\n      const [duckPoolName, duckName] = 'string' === typeof duckPath ? [poolName, duckPath] : [duckPath[0], duckPath[1]]\n      return refDucks.map[duckPoolName] ? refDucks.map[duckPoolName][duckName] : null\n    } else {\n      return null\n    }\n  }\n  const getDispatchActionFromDispatchArgs: (args: IArguments) => IAction = function (args) {\n    // dispatch(action)\n    // dispatch(duckName, actionName, payload)\n    // dispatch([poolName, duckName], actionName, payload)\n    if (1 === args.length) {\n      return args[0]\n    } else if (args.length > 1) {\n      const [duckPath, actionName, payload] = [args[0], args[1], args[2]]\n      const duck = getDuckByName(duckPath)\n      if (null == duck) {\n        const error: IPoolError = new Error(\n          `Received action '${actionName}' dispatch but duck '${duckPath}' is not found`\n        )\n        error.actionName = actionName\n        error.duckPath = duckPath\n        reportError(error, '@duckness/pool', 'dispatch')\n        return null\n      } else {\n        const actionCreator = duck.action[actionName]\n        if (null == actionCreator) {\n          const error: IPoolError = new Error(\n            `Received action dispatch but action '${actionName}' for duck '${duckPath}' is not found`\n          )\n          error.actionName = actionName\n          error.duckPath = duckPath\n          reportError(error, '@duckness/pool', 'dispatch')\n          return null\n        } else {\n          return actionCreator(payload)\n        }\n      }\n    } else {\n      return null\n    }\n  }\n  const dispatch: IPool['dispatch'] = function () {\n    // eslint-disable-next-line prefer-rest-params\n    const action = getDispatchActionFromDispatchArgs(arguments)\n    if (null == action) {\n      const error: IPoolError = new Error('Received action dispatch without action')\n      error.poolName = poolName\n      reportError(error, '@duckness/pool', 'dispatch')\n    } else {\n      if (refStore.current) {\n        return refStore.current.dispatch(action)\n      } else {\n        const error: IPoolError = new Error('Received action dispatch but pool is not built yet')\n        error.dispatchedAction = action\n        error.poolName = poolName\n        reportError(error, '@duckness/pool', 'dispatch', action)\n      }\n    }\n    return void 0\n  } as IPool['dispatch']\n\n  const refReducers: TRefReducers = { root: null, pre: null, post: null }\n  const reduce: IPool['reduce'] = function (stateOrAction: TState | IAction, andAction?: IAction) {\n    if (void 0 === andAction && !refStore.current) {\n      const error: IPoolError = new Error('Reducing state but pool is not built yet')\n      error.dispatchedAction = stateOrAction as IAction\n      error.poolName = poolName\n      reportError(error, '@duckness/pool', 'reduce', stateOrAction)\n      return stateOrAction\n    }\n    const state = void 0 === andAction ? refStore.current.getState() : stateOrAction\n    const action: IAction = void 0 === andAction ? (stateOrAction as IAction) : andAction\n    if (refReducers.root) {\n      return refReducers.root(state, action)\n    } else {\n      const error: IPoolError = new Error('Reducing state but pool is not built yet')\n      error.dispatchedAction = action\n      error.poolName = poolName\n      reportError(error, '@duckness/pool', 'reduce', action)\n      return state\n    }\n  }\n\n  const select: IPool['select'] = function (selector) {\n    if (refStore.current) {\n      return 'function' === typeof selector ? selector(refStore.current.getState()) : refStore.current.getState()\n    } else {\n      return void 0\n    }\n  }\n\n  const fetch: IPool['fetch'] = function (selector, resolver) {\n    return new Promise((resolve, reject) => {\n      if (refStore.current) {\n        let prevSelectedValue: any = void 0\n        let resolved = false\n        let unsubscribe: Unsubscribe = void 0\n        const resolveValue = (value: unknown) => {\n          if (unsubscribe) {\n            unsubscribe()\n          }\n          resolved = true\n          resolve(value)\n        }\n        const tryResolve = (currentState: TState) => {\n          const selectedValue = 'function' === typeof selector ? selector(currentState) : currentState\n          if ('function' === typeof resolver) {\n            resolver(selectedValue, resolveValue, prevSelectedValue)\n            prevSelectedValue = selectedValue\n          } else if (void 0 !== selectedValue) {\n            resolveValue(selectedValue)\n          }\n        }\n        tryResolve(refStore.current.getState())\n        if (!resolved) {\n          unsubscribe = refStore.current.subscribe(() => {\n            tryResolve(refStore.current.getState())\n          })\n        }\n      } else {\n        const error: IPoolError = new Error('Fetching state but pool is not built yet')\n        error.poolName = poolName\n        reportError(error, '@duckness/pool', 'fetch')\n        reject(error)\n      }\n    })\n  }\n\n  const trigger: IPool['trigger'] = function (selector, callback, resolver) {\n    if (refStore.current) {\n      let prevSelectedValue: any = void 0\n      const tryResolve = (currentState: TState) => {\n        const selectedValue = 'function' === typeof selector ? selector(currentState) : currentState\n        if ('function' === typeof resolver) {\n          resolver(selectedValue, callback, prevSelectedValue)\n          prevSelectedValue = selectedValue\n        } else if (prevSelectedValue !== selectedValue) {\n          callback(selectedValue)\n        }\n      }\n      tryResolve(refStore.current.getState())\n      return refStore.current.subscribe(() => {\n        tryResolve(refStore.current.getState())\n      })\n    } else {\n      const error: IPoolError = new Error('Fetching state but pool is not built yet')\n      error.poolName = poolName\n      reportError(error, '@duckness/pool', 'trigger')\n      return void 0\n    }\n  }\n\n  const setPreReducer: IPool['preReducer'] = function (reducer) {\n    refReducers.pre = (state, action) => {\n      try {\n        return reducer(state, action)\n      } catch (error) {\n        try {\n          error.dispatchedAction = action\n          error.poolName = poolName\n        } catch {\n          // skip\n        }\n        reportError(error, '@duckness/pool', 'pre reducer')\n        return state\n      }\n    }\n  }\n  const setPostReducer: IPool['postReducer'] = function (reducer) {\n    refReducers.post = (state, action) => {\n      try {\n        return reducer(state, action)\n      } catch (error) {\n        try {\n          error.dispatchedAction = action\n          error.poolName = poolName\n        } catch {\n          // skip\n        }\n        reportError(error, '@duckness/pool', 'post reducer')\n        return state\n      }\n    }\n  }\n\n  const build: IPool['build'] = function (props = refProps.current) {\n    // save props\n    refProps.current = props || {}\n\n    // build root reducer\n    refReducers.root = buildRootReducer\n      ? buildRootReducer(refDucks.current, { refProps, refReducers, refDucks, refErrorReporter })\n      : function defaultRootReducer(state, action) {\n          // pre reducer\n          const preState = refReducers.pre ? refReducers.pre(state, action) : state\n          // duck reducers\n          const ducksReducedState = refDucks.current.reduce((state, duck) => {\n            try {\n              return duck(state, action)\n            } catch (error) {\n              try {\n                error.poolName = poolName\n                error.duckPoolName = duck.poolName\n                error.duckName = duck.duckName\n                error.dispatchedAction = action\n              } catch {\n                // skip\n              }\n              reportError(error, '@duckness/pool', 'reducer', duck.poolName, duck.duckName)\n              return state\n            }\n          }, preState)\n          // post reducer\n          return refReducers.post ? refReducers.post(ducksReducedState, action) : ducksReducedState\n        }\n\n    // invoke beforeBuild for each pool stream\n    refStreams.current.forEach(stream => {\n      if (stream.beforeBuild) stream.beforeBuild({ refDucks, refProps, refReducers, refErrorReporter })\n    })\n\n    // compose redux middlewares\n    const composeEnhancers =\n      connectReduxDevtoolsExtension &&\n      typeof window === 'object' &&\n      (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n        : (x: any) => x\n    const middlewares = refStreams.current\n      .reduce(\n        (streamMiddlewares, stream) =>\n          stream.middlewares\n            ? streamMiddlewares.concat(stream.middlewares({ refDucks, refProps, refReducers, refErrorReporter }) || [])\n            : streamMiddlewares,\n        []\n      )\n      .concat(refMiddlewares.current || [])\n\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares))\n\n    // create store\n    refStore.current = createStore(\n      refReducers.root,\n      buildStore ? buildStore(refProps.current, { refProps, refDucks, refReducers, refErrorReporter }) || {} : {},\n      enhancer\n    )\n\n    // invoke afterBuild for each pool stream\n    refStreams.current.forEach(stream => {\n      if (stream.afterBuild) stream.afterBuild({ refStore, refDucks, refProps, refReducers, refErrorReporter })\n    })\n\n    // return redux store\n    return refStore.current\n  }\n\n  const pool: IPool = {} as IPool\n\n  Object.defineProperty(pool, 'addDuck', { value: addDuck, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'addMiddleware', { value: addMiddleware, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'addStream', { value: addStream, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'preReducer', { value: setPreReducer, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'postReducer', { value: setPostReducer, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'build', { value: build, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'reportError', { value: reportError, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'setErrorReporter', { value: setErrorReporter, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'store', {\n    get() {\n      return refStore.current\n    },\n    enumerable: true\n  })\n  Object.defineProperty(pool, 'dispatch', { value: dispatch, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'select', { value: select, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'fetch', { value: fetch, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'trigger', { value: trigger, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'reduce', { value: reduce, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'ducks', {\n    get() {\n      return (refDucks.current || []).slice()\n    },\n    enumerable: true\n  })\n  Object.defineProperty(pool, 'getDuckByName', { value: getDuckByName, writable: false, enumerable: true })\n  Object.defineProperty(pool, 'middlewares', {\n    get() {\n      return (refMiddlewares.current || []).slice()\n    },\n    enumerable: true\n  })\n  Object.defineProperty(pool, 'streams', {\n    get() {\n      return (refStreams.current || []).slice()\n    },\n    enumerable: true\n  })\n  Object.defineProperty(pool, 'props', {\n    get() {\n      return Object.assign({}, refProps.current || {})\n    },\n    enumerable: true\n  })\n\n  return pool\n}\n"]}