{"version":3,"file":"SagaDuck.js","sourceRoot":"","sources":["../src/SagaDuck.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAA0D;AAC1D,8CAAqD;AAgBrD,SAAwB,QAAQ,CAAC,QAAgB,EAAE,OAAe,EAAE,WAAyB;IAC3F,IAAM,IAAI,GAAc,IAAA,cAAI,EAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAc,CAAA;IAEzE,IAAM,gBAAgB,GAAG;QAEvB,OAAO,EAAE,CAAC,WAAW,KAAK,OAAO,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,CAAC,EAAN,CAAM,CAAC;KAC7E,CAAA;IAED,IAAM,gBAAgB,GAAkC,UAAU,QAAQ;QACxE,gBAAgB,CAAC,OAAO,GAAG,QAAQ,CAAA;IACrC,CAAC,CAAA;IAED,IAAM,WAAW,GAA6B;QAAU,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QAC7D,IAAI,UAAU,KAAK,OAAO,gBAAgB,CAAC,OAAO,EAAE;YAClD,gBAAgB,CAAC,OAAO,OAAxB,gBAAgB,EAAY,IAAI,EAAC;SAClC;IACH,CAAC,CAAA;IAED,IAAM,KAAK,GAA+B,EAAE,CAAA;IAC5C,IAAM,OAAO,GAAsB,UAAU,IAAI;QAC/C,KAAK,CAAC,IAAI,CACR,IAAA,eAAK,EAAC;;;;;6BACG,IAAI;;;;wBAEP,WAAM,IAAA,cAAI,EAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;;wBAA/B,SAA+B,CAAA;wBAC/B,cAAK;;;wBAEL,IAAI;4BACF,OAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;4BAC9B,OAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;yBAC/B;wBAAC,WAAM;yBAEP;wBACD,WAAW,CAAC,OAAK,EAAE,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;;;;;;SAGvE,CAAC,CACH,CAAA;IACH,CAAC,CAAA;IAED,IAAM,QAAQ,GAA0B;;;wBACtC,WAAM,IAAA,aAAG,EAAC,KAAK,CAAC,EAAA;;oBAAhB,SAAgB,CAAA;;;;KACjB,CAAA;IAED,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC1F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/G,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAErG,OAAO,IAAI,CAAA;AACb,CAAC;AAlDD,2BAkDC","sourcesContent":["import Duck, { IDuck, TDuckContext } from '@duckness/duck'\nimport { spawn, call, all } from 'redux-saga/effects'\nimport { Saga } from 'redux-saga'\n\nexport interface ISagaDuck extends IDuck {\n  readonly saga: (saga: TSaga) => void\n  readonly rootSaga: () => Generator<ReturnType<typeof all>>\n  readonly setErrorReporter: (reporter: IErrorReporter) => void\n  readonly reportError: (...args: any[]) => void\n}\n\nexport type TSaga = Saga\n\nexport interface IErrorReporter {\n  (...args: any[]): void\n}\n\nexport default function SagaDuck(duckName: string, appName: string, duckContext: TDuckContext) {\n  const duck: ISagaDuck = Duck(duckName, appName, duckContext) as ISagaDuck\n\n  const refErrorReporter = {\n    // eslint-disable-next-line no-console\n    current: ('undefined' !== typeof console && console.error) || (() => void 0)\n  }\n\n  const setErrorReporter: ISagaDuck['setErrorReporter'] = function (reporter) {\n    refErrorReporter.current = reporter\n  }\n\n  const reportError: ISagaDuck['reportError'] = function (...args) {\n    if ('function' === typeof refErrorReporter.current) {\n      refErrorReporter.current(...args)\n    }\n  }\n\n  const sagas: ReturnType<typeof spawn>[] = []\n  const addSaga: ISagaDuck['saga'] = function (saga) {\n    sagas.push(\n      spawn(function* () {\n        while (true) {\n          try {\n            yield call(saga, duck.duckFace)\n            break\n          } catch (error) {\n            try {\n              error.poolName = duck.poolName\n              error.duckName = duck.duckName\n            } catch {\n              // skip\n            }\n            reportError(error, '@duckness/saga', duck.poolName, duck.duckName)\n          }\n        }\n      })\n    )\n  }\n\n  const rootSaga: ISagaDuck['rootSaga'] = function* () {\n    yield all(sagas)\n  }\n\n  Object.defineProperty(duck, 'saga', { value: addSaga, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'rootSaga', { value: rootSaga, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'setErrorReporter', { value: setErrorReporter, writable: false, enumerable: true })\n  Object.defineProperty(duck, 'reportError', { value: reportError, writable: false, enumerable: true })\n\n  return duck\n}\n"]}