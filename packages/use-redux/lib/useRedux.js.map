{"version":3,"sources":["../src/useRedux.js"],"names":["useRedux","store","selector","shouldUpdate","shouldSelect","getState","selectedState","setSelectedState","customShouldSelect","refPrevStoreState","current","refPrevSelectedState","refSubscription","nextStoreState","nextSelectedState","prevSelectedStateUpdated","prevSelectedState","unsubscribe","subscribe","useDispatchAction","actionCreator","payloadTransformer","payload","dispatch","useDispatch","dispatcher","deps","args"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo, useCallback, useRef } from 'react'\n\n/*\n * shouldUpdate:\n *   true - always update\n *   function - update if true == shouldUpdate(nextSelectedState, prevSelectedState, ?storePrevSelectedState(prevSelectedState))\n *   (default) - update if nextSelectedState !== prevSelectedState\n *\n * shouldSelect:\n *   function - select if true == shouldSelect(nextStoreState, prevStoreState)\n *   (default) - always select\n */\n\nexport default function useRedux(store, selector, shouldUpdate, shouldSelect) {\n  const [selectedState, setSelectedState] = useState(() => selector(store.getState()))\n\n  const customShouldSelect = 'function' === typeof shouldSelect\n\n  const refPrevStoreState = useRef(null)\n  refPrevStoreState.current = useMemo(() => (customShouldSelect ? store.getState() : null), [store, customShouldSelect])\n\n  const refPrevSelectedState = useRef(null)\n  if (true !== shouldUpdate) {\n    refPrevSelectedState.current = selectedState\n  }\n\n  const refSubscription = useRef(null)\n  refSubscription.current = useCallback(\n    nextStoreState => {\n      if (!customShouldSelect || shouldSelect(nextStoreState, refPrevStoreState.current)) {\n        const nextSelectedState = selector(nextStoreState)\n        let prevSelectedStateUpdated = false\n        if (\n          true === shouldUpdate ||\n          ('function' === typeof shouldUpdate &&\n            shouldUpdate(nextSelectedState, refPrevSelectedState.current, prevSelectedState => {\n              refPrevSelectedState.current = prevSelectedState\n              prevSelectedStateUpdated = true\n            })) ||\n          nextSelectedState !== refPrevSelectedState.current\n        ) {\n          setSelectedState(nextSelectedState)\n          if (!prevSelectedStateUpdated && true !== shouldUpdate) {\n            refPrevSelectedState.current = nextSelectedState\n          }\n        }\n      }\n      if (customShouldSelect) {\n        refPrevStoreState.current = nextStoreState\n      }\n    },\n    [selector, shouldUpdate, shouldSelect, customShouldSelect]\n  )\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      refSubscription.current(store.getState())\n    })\n    return () => {\n      unsubscribe()\n    }\n  }, [store])\n\n  return selectedState\n}\n\nexport function useDispatchAction(store, actionCreator, payloadTransformer) {\n  return useCallback(\n    payload =>\n      void 0 === payloadTransformer\n        ? store.dispatch(actionCreator(payload))\n        : 'function' === typeof payloadTransformer\n        ? store.dispatch(actionCreator(payloadTransformer(payload)))\n        : store.dispatch(actionCreator(payloadTransformer)),\n    [store, actionCreator, payloadTransformer]\n  )\n}\n\nexport function useDispatch(store, dispatcher, deps = []) {\n  return useCallback((...args) => dispatcher(store.dispatch, ...args), [store, ...deps])\n}\n"],"file":"useRedux.js"}