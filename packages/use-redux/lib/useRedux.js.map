{"version":3,"sources":["../src/useRedux.js"],"names":["UNSET_MARKER","useRedux","store","selector","shouldUpdate","shouldSelect","selectedState","getState","setSelectedState","customShouldSelect","customShouldUpdate","refPrevStoreState","refPrevSelectedState","current","prevSelectedStateUpdated","prevSelectedState","refSubscription","nextStoreState","nextSelectedState","unsubscribe","subscribe","useDispatchAction","actionCreator","payloadTransformer","payload","dispatch","useDispatch","dispatcher","deps","args","combineSelectors","selectorsMap","selectedStatesEqual","selectorKeys","Object","keys","combinedSelectors","selectorKey","i","length","storePrevSelectedState","areEqual","connect","Component","mapToProps","ConnectedComponent","props","refProps","safeSelector","state","selected","connectedProps","displayName","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react'\n\nconst UNSET_MARKER = {}\n\n/*\n * shouldUpdate:\n *   true - always update\n *   function - update if true == shouldUpdate(nextSelectedState, prevSelectedState, ?storePrevSelectedState(prevSelectedState))\n *   (default) - update if nextSelectedState !== prevSelectedState\n *\n * shouldSelect:\n *   function - select if true == shouldSelect(nextStoreState, prevStoreState)\n *   (default) - always select\n */\n\nexport default function useRedux(store, selector, shouldUpdate, shouldSelect) {\n  const [{ selectedState }, setSelectedState] = useState(() => {\n    return { selectedState: selector(store.getState()) }\n  })\n\n  const customShouldSelect = 'function' === typeof shouldSelect\n  const customShouldUpdate = 'function' === typeof shouldUpdate\n\n  const refPrevStoreState = useRef(void 0)\n  const refPrevSelectedState = useRef(UNSET_MARKER)\n  useEffect(() => {\n    refPrevStoreState.current = customShouldSelect ? store.getState() : null\n    if (customShouldUpdate) {\n      let prevSelectedStateUpdated = false\n      shouldUpdate(\n        selectedState,\n        UNSET_MARKER === refPrevSelectedState.current ? selectedState : refPrevSelectedState.current,\n        prevSelectedState => {\n          refPrevSelectedState.current = prevSelectedState\n          prevSelectedStateUpdated = true\n        }\n      )\n      if (!prevSelectedStateUpdated) {\n        refPrevSelectedState.current = selectedState\n      }\n    } else if (true !== shouldUpdate) {\n      refPrevSelectedState.current = selectedState\n    }\n  }, [store, selector, shouldUpdate, shouldSelect])\n\n  const refSubscription = useRef(null)\n  refSubscription.current = useCallback(\n    nextStoreState => {\n      if (!customShouldSelect || shouldSelect(nextStoreState, refPrevStoreState.current)) {\n        const nextSelectedState = selector(nextStoreState)\n        let prevSelectedStateUpdated = false\n        if (\n          true === shouldUpdate ||\n          (customShouldUpdate &&\n            shouldUpdate(nextSelectedState, refPrevSelectedState.current, prevSelectedState => {\n              refPrevSelectedState.current = prevSelectedState\n              prevSelectedStateUpdated = true\n            })) ||\n          (!customShouldUpdate && nextSelectedState !== refPrevSelectedState.current)\n        ) {\n          setSelectedState({ selectedState: nextSelectedState })\n          if (!prevSelectedStateUpdated && true !== shouldUpdate) {\n            refPrevSelectedState.current = nextSelectedState\n          }\n        }\n      }\n      if (customShouldSelect) {\n        refPrevStoreState.current = nextStoreState\n      }\n    },\n    [selector, shouldUpdate, shouldSelect]\n  )\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      refSubscription.current(store.getState())\n    })\n    return () => {\n      unsubscribe()\n    }\n  }, [store])\n\n  return selectedState\n}\n\nexport function useDispatchAction(store, actionCreator, payloadTransformer) {\n  return useCallback(\n    payload =>\n      void 0 === payloadTransformer\n        ? store.dispatch(actionCreator(payload))\n        : 'function' === typeof payloadTransformer\n        ? store.dispatch(actionCreator(payloadTransformer(payload)))\n        : store.dispatch(actionCreator(payloadTransformer)),\n    [store, actionCreator, payloadTransformer]\n  )\n}\n\nexport function useDispatch(store, dispatcher, deps = []) {\n  return useCallback((...args) => dispatcher(store.dispatch, ...args), [store, ...deps])\n}\n\nexport function combineSelectors(selectorsMap, { selectedStatesEqual } = {}) {\n  const selectorKeys = Object.keys(selectorsMap)\n  const combinedSelectors = {\n    selector: (...state) => {\n      const selectedState = {}\n      for (let i = 0; i < selectorKeys.length; i++) {\n        const selectorKey = selectorKeys[i]\n        selectedState[selectorKey] = selectorsMap[selectorKey](...state)\n      }\n      return selectedState\n    },\n    shouldUpdate: selectedStatesEqual\n      ? (nextSelectedState, prevSelectedState, storePrevSelectedState) => {\n          for (let i = 0; i < selectorKeys.length; i++) {\n            const selectorKey = selectorKeys[i]\n            if (!selectedStatesEqual(selectorKey, nextSelectedState[selectorKey], prevSelectedState[selectorKey])) {\n              return true\n            }\n          }\n          if (storePrevSelectedState) {\n            storePrevSelectedState(prevSelectedState)\n          }\n          return false\n        }\n      : (nextSelectedState, prevSelectedState, storePrevSelectedState) => {\n          for (let i = 0; i < selectorKeys.length; i++) {\n            const selectorKey = selectorKeys[i]\n            if (nextSelectedState[selectorKey] !== prevSelectedState[selectorKey]) {\n              return true\n            }\n          }\n          if (storePrevSelectedState) {\n            storePrevSelectedState(prevSelectedState)\n          }\n          return false\n        },\n    areEqual: (nextSelectedState, prevSelectedState) =>\n      !combinedSelectors.shouldUpdate(nextSelectedState, prevSelectedState)\n  }\n  return combinedSelectors\n}\n\nexport function connect(store, selector, shouldUpdate, shouldSelect, dispatch = store.dispatch) {\n  return function (Component, mapToProps) {\n    function ConnectedComponent(props) {\n      const refProps = useRef(props)\n      refProps.current = props\n      const safeSelector = useCallback(selector ? state => selector(state, refProps.current) : () => {}, [])\n      const selected = useRedux(store, safeSelector, shouldUpdate, shouldSelect)\n      const connectedProps = (mapToProps ? mapToProps(selected, props, dispatch) : selected) || {}\n      return <Component {...props} {...connectedProps} />\n    }\n    ConnectedComponent.displayName = `connect(${Component.displayName || Component.name || 'Component'})`\n    return ConnectedComponent\n  }\n}\n"],"file":"useRedux.js"}