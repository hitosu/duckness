{"version":3,"sources":["../src/useRedux.js"],"names":["useRedux","store","selector","shouldUpdate","shouldSelect","getState","selectedState","setSelectedState","refLastState","current","refLastSelected","refUnsubscribe","subscribe","currentState","selected","dispatch","useDispatch","actionCreator"],"mappings":"aAAA,4B,qwCAEe,QAASA,CAAAA,QAAT,CAAkBC,CAAlB,CAAyBC,CAAzB,CAAmCC,CAAnC,CAAiDC,CAAjD,CAA+D,OAClC,oBAAS,iBAAMF,CAAAA,CAAQ,CAACD,CAAK,CAACI,QAAN,EAAD,CAAd,CAAT,CADkC,uBACrEC,CADqE,MACtDC,CADsD,MA4B5E,MAzBA,qBAAU,UAAM,IACRC,CAAAA,CAAY,CAAG,CAAEC,OAAO,CAAEL,CAAY,CAAGH,CAAK,CAACI,QAAN,EAAH,CAAsB,IAA7C,CADP,CAERK,CAAe,CAAG,CAAED,OAAO,CAAEN,CAAY,CAAGG,CAAH,CAAmB,IAA1C,CAFV,CAGRK,CAAc,CAAG,CACrBF,OAAO,CAAER,CAAK,CAACW,SAAN,CAAgB,UAAM,CAC7B,GAAMC,CAAAA,CAAY,CAAGZ,CAAK,CAACI,QAAN,EAArB,CACA,GAAI,CAACD,CAAD,EAAiBA,CAAY,CAACS,CAAD,CAAeL,CAAY,CAACC,OAA5B,CAAjC,CAAuE,CACrE,GAAMK,CAAAA,CAAQ,CAAGZ,CAAQ,CAACW,CAAD,CAAzB,CADqE,CAEjE,CAACV,CAAD,EAAiBA,CAAY,CAACW,CAAD,CAAWJ,CAAe,CAACD,OAA3B,CAFoC,GAGnEF,CAAgB,CAACO,CAAD,CAHmD,CAKjEX,CALiE,GAMnEO,CAAe,CAACD,OAAhB,CAA0BK,CANyC,CAQtE,CACGV,CAXyB,GAY3BI,CAAY,CAACC,OAAb,CAAuBI,CAZI,CAc9B,CAdQ,CADY,CAHT,CAoBd,MAAO,WAAM,CACXF,CAAc,CAACF,OAAf,EACD,CACF,CAvBD,CAuBG,CAACR,CAAD,CAAQC,CAAR,CAAkBC,CAAlB,CAAgCC,CAAhC,CAvBH,CAyBA,CAAO,CAACE,CAAD,CAAgBL,CAAK,CAACc,QAAtB,CACR,CAEM,QAASC,CAAAA,WAAT,CAAqBf,CAArB,CAA4BgB,CAA5B,CAA2C,CAChD,MAAO,uBAAY,iBAAahB,CAAAA,CAAK,CAACc,QAAN,CAAeE,CAAa,MAAb,kBAAf,CAAb,CAAZ,CAAiE,CAAChB,CAAD,CAAQgB,CAAR,CAAjE,CACR","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\n\nexport default function useRedux(store, selector, shouldUpdate, shouldSelect) {\n  const [selectedState, setSelectedState] = useState(() => selector(store.getState()))\n\n  useEffect(() => {\n    const refLastState = { current: shouldSelect ? store.getState() : null }\n    const refLastSelected = { current: shouldUpdate ? selectedState : null }\n    const refUnsubscribe = {\n      current: store.subscribe(() => {\n        const currentState = store.getState()\n        if (!shouldSelect || shouldSelect(currentState, refLastState.current)) {\n          const selected = selector(currentState)\n          if (!shouldUpdate || shouldUpdate(selected, refLastSelected.current)) {\n            setSelectedState(selected)\n          }\n          if (shouldUpdate) {\n            refLastSelected.current = selected\n          }\n        }\n        if (shouldSelect) {\n          refLastState.current = currentState\n        }\n      })\n    }\n    return () => {\n      refUnsubscribe.current()\n    }\n  }, [store, selector, shouldUpdate, shouldSelect])\n\n  return [selectedState, store.dispatch]\n}\n\nexport function useDispatch(store, actionCreator) {\n  return useCallback((...args) => store.dispatch(actionCreator(...args)), [store, actionCreator])\n}\n"],"file":"useRedux.js"}