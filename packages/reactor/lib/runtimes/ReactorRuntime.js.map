{"version":3,"file":"ReactorRuntime.js","sourceRoot":"","sources":["../../src/runtimes/ReactorRuntime.ts"],"names":[],"mappings":"","sourcesContent":["import type { Reagent, ReagentType } from '../Reagent'\nimport type { Effect } from '../effects/Effect'\n\nexport type ReactionInstruction = Effect\nexport type ReactionGenerator = Generator<ReactionInstruction, any, any>\nexport type Reaction = (...args: any[]) => ReactionGenerator\nexport type ReagentListener = (reagent: Reagent) => void\nexport type CancelReagentListener = () => void\n\nexport interface ReactorRuntime {\n  put(reagent: Reagent): void;\n  takeEvery(reagentTypes: ReagentType | Array<ReagentType>, listener: ReagentListener): CancelReagentListener;\n  addReaction(reaction: Reaction): void;\n  run(...args: any[]): boolean;\n  stop(stopValue: any): boolean;\n  setContext(props: { [key: string]: any }): void;\n  getContext: (...keys: string[]) => { [key: string]: any };\n  isRunning(): boolean;\n}\n"]}