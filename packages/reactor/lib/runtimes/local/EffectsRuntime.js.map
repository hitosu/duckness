{"version":3,"file":"EffectsRuntime.js","sourceRoot":"","sources":["../../../src/runtimes/local/EffectsRuntime.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReagentListener, CancelReagentListener, Reaction } from '../ReactorRuntime'\nimport type { TaskID, TaskManager, TaskOnDone } from './TaskManager'\nimport type { Reagent, ReagentType } from '../../Reagent'\nimport type { EffectTaskWorker } from './EffectTaskWorker'\n\nimport spawnReaction, { SpawnedReaction } from './ReactionRuntime'\n\nexport interface EffectsRuntime {\n  addTask(worker: EffectTaskWorker, onDone: TaskOnDone, ...workerArgs: any[]): TaskID;\n  cancelTask(id: TaskID, cancelValue?: any): boolean;\n  runTasksQueue(resume?: boolean): void;\n  spawnReaction: (reaction: Reaction, ...args: any[]) => SpawnedReaction;\n  put: (reagent: Reagent) => void;\n  takeEvery: (reagentType: ReagentType, listener: ReagentListener) => CancelReagentListener;\n  take: (reagentType: ReagentType, listener: ReagentListener) => CancelReagentListener;\n  setContext: (props: { [key: string]: any }) => void;\n  getContext: (...keys: string[]) => { [key: string]: any };\n}\n\nexport function buildEffectsRuntime(reactorState: {\n  taskManager: TaskManager,\n  spawnedReactions: Set<SpawnedReaction>,\n  context: { [key: string]: any }\n}): EffectsRuntime {\n  const reagentListeners: Map<ReagentType, Set<ReagentListener>> = new Map()\n\n  const effectsRuntime: EffectsRuntime = {\n    addTask(worker, onDone, ...workerArgs) {\n      return reactorState.taskManager.add(worker, onDone, ...workerArgs)\n    },\n    cancelTask(id: TaskID, cancelValue?: any) {\n      return reactorState.taskManager.cancel(id, cancelValue)\n    },\n    runTasksQueue(resume) {\n      reactorState.taskManager.runQueue(resume)\n    },\n    spawnReaction(reaction, ...args) {\n      const spawnedReaction: SpawnedReaction = spawnReaction(\n        reaction,\n        args,\n        () => {\n          reactorState.spawnedReactions.delete(spawnedReaction)\n        },\n        effectsRuntime\n      )\n      reactorState.spawnedReactions.add(spawnedReaction)\n      reactorState.taskManager.runQueue()\n      return spawnedReaction\n    },\n    put(reagent) {\n      if (reagentListeners.has(reagent.type)) {\n        reagentListeners.get(reagent.type).forEach(listener => {\n          listener(reagent)\n        })\n      }\n    },\n    takeEvery(reagentType, listener) {\n      if (reagentListeners.has(reagentType)) {\n        const listeners = reagentListeners.get(reagentType)\n        listeners.add(listener)\n      } else {\n        const listeners: Set<ReagentListener> = new Set()\n        listeners.add(listener)\n        reagentListeners.set(reagentType, listeners)\n      }\n      // unsubscribe\n      return () => {\n        if (reagentListeners.has(reagentType)) {\n          const listeners = reagentListeners.get(reagentType)\n          listeners.delete(listener)\n          if (0 == listeners.size) {\n            reagentListeners.delete(reagentType)\n          }\n        }\n      }\n    },\n    take(reagentType, listener) {\n      const stopTaking = effectsRuntime.takeEvery(reagentType, reagent => {\n        stopTaking()\n        listener(reagent)\n      })\n      return stopTaking\n    },\n    setContext(props = {}) {\n      Object.assign(reactorState.context, props)\n    },\n    getContext(...keys) {\n      const context: { [key: string]: any } = {}\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        context[key] = reactorState.context[key]\n      }\n      return context\n    }\n  }\n  return effectsRuntime\n}\n"]}