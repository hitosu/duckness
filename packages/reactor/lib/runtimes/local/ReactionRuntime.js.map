{"version":3,"file":"ReactionRuntime.js","sourceRoot":"","sources":["../../../src/runtimes/local/ReactionRuntime.ts"],"names":[],"mappings":";;AAIA,qCAA+B;AAC/B,+CAA+C;AAO/C,SAAwB,aAAa,CACnC,QAAkB,EAClB,YAAmB,EACnB,MAAyB,EACzB,cAA8B;IAE9B,IAAM,KAAK,GAGP;QACF,IAAI,EAAE,KAAK;QACX,uBAAuB,EAAE,IAAI;KAC9B,CAAA;IAED,IAAM,iBAAiB,GAAsB,QAAQ,eAAI,YAAY,CAAC,CAAA;IAEtE,SAAS,eAAe,CAAC,YAAkB;QACzC,IAAM,gBAAgB,GAAwC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QAClG,IAAI,gBAAgB,CAAC,IAAI,EAAE;YACzB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAA;YACjB,IAAI,MAAM,EAAE;gBACV,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;aAC/B;SACF;aAAM;YACL,IAAM,kBAAkB,GAAwB,gBAAgB,CAAC,KAAK,CAAA;YACtE,IAAI,IAAA,iBAAQ,EAAC,kBAAkB,CAAC,EAAE;gBAChC,IAAI,iBAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;oBACpC,KAAK,CAAC,uBAAuB,GAAG,cAAc,CAAC,OAAO,CACpD,iBAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAChC,UAAC,YAAiB;wBAChB,eAAe,CAAC,YAAY,CAAC,CAAA;oBAC/B,CAAC,EACD,kBAAkB,EAClB,cAAc,CACf,CAAA;oBACD,cAAc,CAAC,aAAa,EAAE,CAAA;iBAC/B;aACF;iBAAM;gBACL,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,eAAe,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAA;aAC1E;SACF;IACH,CAAC;IAED,eAAe,EAAE,CAAA;IAEjB,OAAO;QACL,MAAM,YAAC,WAAiB;YACtB,IAAI,KAAK,CAAC,IAAI,EAAE;gBACd,OAAO,KAAK,CAAA;aACb;iBAAM;gBACL,IAAI,IAAI,IAAI,KAAK,CAAC,uBAAuB,EAAE;oBACzC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAA;oBACrE,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAA;iBACrC;gBACD,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;gBACrC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAA;gBACjB,OAAO,IAAI,CAAA;aACZ;QACH,CAAC;QACD,uBAAuB;YACrB,OAAO,KAAK,CAAC,uBAAuB,CAAA;QACtC,CAAC;KACF,CAAA;AACH,CAAC;AA/DD,gCA+DC","sourcesContent":["import type { Reaction, ReactionGenerator, ReactionInstruction } from '../ReactorRuntime'\nimport type { EffectsRuntime } from './EffectsRuntime'\nimport type { TaskID, TaskOnDone, TaskOnCancel } from './TaskManager'\n\nimport effects from './effects'\nimport { isEffect } from '../../effects/Effect'\n\nexport interface SpawnedReaction {\n  cancel: TaskOnCancel;\n  curentInstructionTaskID: () => TaskID | null;\n}\n\nexport default function spawnReaction(\n  reaction: Reaction,\n  reactionArgs: any[],\n  onDone: TaskOnDone | null,\n  effectsRuntime: EffectsRuntime\n): SpawnedReaction {\n  const state: {\n    done: boolean,\n    curentInstructionTaskID: TaskID | null\n  } = {\n    done: false,\n    curentInstructionTaskID: null\n  }\n\n  const reactionGenerator: ReactionGenerator = reaction(...reactionArgs)\n\n  function advanceReaction(advanceValue?: any) {\n    const currentIteration: IteratorResult<ReactionInstruction> = reactionGenerator.next(advanceValue)\n    if (currentIteration.done) {\n      state.done = true\n      if (onDone) {\n        onDone(currentIteration.value)\n      }\n    } else {\n      const currentInstruction: ReactionInstruction = currentIteration.value\n      if (isEffect(currentInstruction)) {\n        if (effects[currentInstruction.type]) {\n          state.curentInstructionTaskID = effectsRuntime.addTask(\n            effects[currentInstruction.type],\n            (advanceValue: any) => {\n              advanceReaction(advanceValue)\n            },\n            currentInstruction,\n            effectsRuntime\n          )\n          effectsRuntime.runTasksQueue()\n        }\n      } else {\n        Promise.resolve(currentInstruction).then(value => advanceReaction(value))\n      }\n    }\n  }\n\n  advanceReaction()\n\n  return {\n    cancel(cancelValue?: any) {\n      if (state.done) {\n        return false\n      } else {\n        if (null != state.curentInstructionTaskID) {\n          effectsRuntime.cancelTask(state.curentInstructionTaskID, cancelValue)\n          state.curentInstructionTaskID = null\n        }\n        reactionGenerator.return(cancelValue)\n        state.done = true\n        return true\n      }\n    },\n    curentInstructionTaskID() {\n      return state.curentInstructionTaskID\n    }\n  }\n}\n"]}