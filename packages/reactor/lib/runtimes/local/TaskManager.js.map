{"version":3,"file":"TaskManager.js","sourceRoot":"","sources":["../../../src/runtimes/local/TaskManager.ts"],"names":[],"mappings":"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","sourcesContent":["const MAX_TASK_ID = Math.pow(2, 53) - 1\nexport type TaskID = number\nexport type TaskOnDone = (...onDoneArgs: any[]) => void\nexport type TaskOnCancel = (cancelValue?: any) => boolean\nexport type TaskWorker = (onDone: TaskOnDone, ...workerArgs: any[]) => { cancel?: TaskOnCancel }\nexport interface Task {\n  id: TaskID;\n  worker: TaskWorker;\n  workerArgs?: any[];\n  onDone: TaskOnDone;\n  onCancel?: TaskOnCancel;\n}\nexport interface TaskManager {\n  add(worker: TaskWorker, onDone: TaskOnDone, ...workerArgs: any[]): TaskID;\n  runQueue(resume?: boolean): void;\n  pauseQueue(): void;\n  resumeQueue(): void;\n  cancel(id: TaskID, cancelValue?: any): boolean;\n  cancelAll(cancelValue?: any): void;\n}\n\nexport default function buildTaskManager(): TaskManager {\n  const state: {\n    idCounter: number,\n    taskQueue: Task[],\n    running: Map<TaskID, Task>,\n    paused: boolean\n  } = {\n    idCounter: 0,\n    taskQueue: [],\n    running: new Map(),\n    paused: false\n  }\n\n  const taskManager: TaskManager = {\n    add(worker, onDone, ...workerArgs) {\n      const id = MAX_TASK_ID <= state.idCounter ? (state.idCounter = 0) : state.idCounter++\n      state.taskQueue.push({\n        id,\n        worker,\n        workerArgs,\n        onDone\n      })\n      return id\n    },\n    runQueue(resume = false) {\n      if (resume) {\n        taskManager.resumeQueue()\n      }\n      if (!state.paused) {\n        while (state.taskQueue.length) {\n          const task = state.taskQueue.shift()\n          const { cancel } = task.worker((...onDoneArgs) => {\n            state.running.delete(task.id)\n            task.onDone(...onDoneArgs)\n          }, ...task.workerArgs)\n          task.onCancel = cancel\n        }\n      }\n    },\n    pauseQueue() {\n      state.paused = true\n    },\n    resumeQueue() {\n      state.paused = false\n    },\n    cancel(id, cancelValue) {\n      let canceled = false\n      if (state.running.has(id)) {\n        const task = state.running.get(id)\n        canceled = task.onCancel ? task.onCancel(cancelValue) : true\n        state.running.delete(id)\n      } else {\n        state.taskQueue = state.taskQueue.filter(task => (id === task.id ? ((canceled = true), false) : true))\n      }\n      return canceled\n    },\n    cancelAll(cancelValue) {\n      state.taskQueue = []\n      state.running.forEach(task => {\n        if (task.onCancel) task.onCancel(cancelValue)\n      })\n      state.running.clear()\n    }\n  }\n\n  return Object.freeze(taskManager)\n}\n"]}