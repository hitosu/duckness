{"version":3,"file":"PoolEpicStream.js","sourceRoot":"","sources":["../src/PoolEpicStream.ts"],"names":[],"mappings":";;AAAA,qDAA2E;AAI3E,SAAwB,cAAc,CAAC,EAOjC;QAPiC,qBAOnC,EAAE,KAAA,EANJ,aAAa,mBAAA;IAOb,IAAM,cAAc,GAAG,IAAA,uCAAoB,GAAE,CAAA;IAE7C,IAAM,WAAW,GAA+B;IAEhD,CAAC,CAAA;IAED,IAAM,WAAW,GAA+B;QAC9C,OAAO,CAAC,cAAc,CAAC,CAAA;IACzB,CAAC,CAAA;IAED,IAAM,UAAU,GAA8B,UAAU,EAA8B;YAA5B,QAAQ,cAAA,EAAE,gBAAgB,sBAAA;QAClF,IAAM,QAAQ,GAAG,aAAa;YAC5B,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,QAAQ,UAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC;YACjE,CAAC,CAAC,+BAAY,eACP,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAe;gBAChD,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;oBAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;iBAC5B;gBACD,OAAO,KAAK,CAAA;YACd,CAAC,EAAE,EAAE,CAAC,CACP,CAAA;QACL,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC9B,CAAC,CAAA;IAED,IAAM,cAAc,GAAgB,EAAiB,CAAA;IAErD,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/G,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAC/G,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAE7G,OAAO,cAAc,CAAA;AACvB,CAAC;AAxCD,iCAwCC","sourcesContent":["import { createEpicMiddleware, combineEpics, Epic } from 'redux-observable'\nimport { IPoolStream, IDuck, TRefDucks, TRefErrorReporter } from '@duckness/pool'\nimport { IEpicDuck } from '@duckness/epic'\n\nexport default function PoolEpicStream({\n  buildRootEpic\n}: {\n  buildRootEpic?: (\n    ducks: IDuck[],\n    { refDucks, refErrorReporter }: { refDucks: TRefDucks; refErrorReporter: TRefErrorReporter }\n  ) => Epic\n} = {}) {\n  const epicMiddleware = createEpicMiddleware()\n\n  const beforeBuild: IPoolStream['beforeBuild'] = function () {\n    // NOP\n  }\n\n  const middlewares: IPoolStream['middlewares'] = function () {\n    return [epicMiddleware]\n  }\n\n  const afterBuild: IPoolStream['afterBuild'] = function ({ refDucks, refErrorReporter }) {\n    const rootEpic = buildRootEpic\n      ? buildRootEpic(refDucks.current, { refDucks, refErrorReporter })\n      : combineEpics(\n          ...refDucks.current.reduce((epics, duck: IEpicDuck) => {\n            if (duck.rootEpic) {\n              duck.setErrorReporter(refErrorReporter.current)\n              epics.push(duck.rootEpic())\n            }\n            return epics\n          }, [])\n        )\n    epicMiddleware.run(rootEpic)\n  }\n\n  const PoolEpicStream: IPoolStream = {} as IPoolStream\n\n  Object.defineProperty(PoolEpicStream, 'middlewares', { value: middlewares, writable: false, enumerable: true })\n  Object.defineProperty(PoolEpicStream, 'beforeBuild', { value: beforeBuild, writable: false, enumerable: true })\n  Object.defineProperty(PoolEpicStream, 'afterBuild', { value: afterBuild, writable: false, enumerable: true })\n\n  return PoolEpicStream\n}\n"]}